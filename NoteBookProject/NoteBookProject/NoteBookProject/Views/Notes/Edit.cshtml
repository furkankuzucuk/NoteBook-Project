@model NoteBookProject.Models.Note

<h2>Notu Düzenle</h2>

<form asp-action="Edit" method="post" id="edit-note-form">
    <div class="form-group">
        <label for="Title">Başlık</label>
        <input type="text" class="form-control" id="Title" name="Title" value="@Model.Title" required />
    </div>
    <div class="form-group">
        <label for="Content">İçerik</label>

        <!-- This is where Editor.js will be rendered -->
        <div id="editorjs"></div>
        <!-- Hidden input to store the Editor.js data -->
        <input type="hidden" id="Content" name="Content" />
    </div>
    <button type="submit" class="btn btn-primary mt-3">Değişiklikleri Kaydet</button>
</form>

@section Scripts {
    <!-- Include Editor.js and tools from CDN -->
    <script src="https://cdn.jsdelivr.net/npm/@@editorjs/editorjs@latest"></script>
    <script src="https://cdn.jsdelivr.net/npm/@@editorjs/header@latest"></script>
    <script src="https://cdn.jsdelivr.net/npm/@@editorjs/paragraph@latest"></script>
    <script src="https://cdn.jsdelivr.net/npm/@@editorjs/list@latest"></script>
    <script src="https://cdn.jsdelivr.net/npm/@@editorjs/inline-code@latest"></script>
    <script src="https://cdn.jsdelivr.net/npm/@@editorjs/image@latest"></script>
    <script src="https://cdn.jsdelivr.net/npm/@@editorjs/quote@latest"></script>
    <script src="https://cdn.jsdelivr.net/npm/@@editorjs/marker@latest"></script>
    <script src="https://cdn.jsdelivr.net/npm/@@editorjs/link@latest"></script>
    <script src="https://cdn.jsdelivr.net/npm/@@editorjs/delimiter@latest"></script>
    <script src="https://cdn.jsdelivr.net/npm/@@editorjs/table@latest"></script>
    <script src="https://cdn.jsdelivr.net/npm/@@editorjs/raw@latest"></script>
    <script src="https://cdn.jsdelivr.net/npm/@@editorjs/warning@latest"></script>
    <script src="https://cdn.jsdelivr.net/npm/@@editorjs/checklist@latest"></script>

    <script>
        document.addEventListener('DOMContentLoaqded', function () {
            // Get the initial data from the model (ensure it's properly formatted JSON)
            const editorData = @Html.Raw(Model.Content) || { blocks: [] };

            // Initialize Editor.js with desired tools
            const editor = new EditorJS({
                holder: 'editorjs',
                tools: {
                    header: {
                        class: Header,
                        inlineToolbar: ['bold', 'italic', 'link']
                    },
                    paragraph: {
                        class: Paragraph,
                        inlineToolbar: ['bold', 'italic', 'underline', 'inlineCode', 'link', 'marker']
                    },
                    list: {
                        class: List,
                        inlineToolbar: ['bold', 'italic', 'link']
                    },
                    inlineCode: {
                        class: InlineCode,
                    },
                    image: {
                        class: ImageTool,
                        config: {
                            endpoints: {
                                byFile: 'http://localhost:8008/uploadFile',
                                byUrl: 'http://localhost:8008/fetchUrl',
                            }
                        }
                    },
                    quote: {
                        class: Quote,
                        inlineToolbar: ['bold', 'italic', 'link']
                    },
                    marker: {
                        class: Marker,
                        shortcut: 'CMD+SHIFT+M'
                    },
                    linkTool: {
                        class: LinkTool,
                        config: {
                            endpoint: 'http://localhost:8008/fetchUrl',
                        }
                    },
                    delimiter: {
                        class: Delimiter
                    },
                    table: {
                        class: Table,
                    },
                    raw: {
                        class: RawTool,
                    },
                    warning: {
                        class: Warning,
                        config: {
                            titlePlaceholder: 'Title',
                            messagePlaceholder: 'Message',
                        }
                    },
                    checklist: {
                        class: Checklist,
                        inlineToolbar: true,
                    }
                },
                data: editorData, // Load the initial data into Editor.js
                inlineToolbar: true,
            });

            // Handle form submission
            document.getElementById('edit-note-form').addEventListener('submit', function (e) {
                e.preventDefault(); // Prevent default form submission

                // Save the content from Editor.js and submit the form
                editor.save().then((outputData) => {
                    document.getElementById('Content').value = JSON.stringify(outputData); // Store the data in the hidden input
                    this.submit(); // Submit the form
                }).catch((error) => {
                    console.log('Kaydetme hatası', error);
                });
            });
        });
    </script>
}
